/**
 * Copyright (c) 1996-2004 Borland Software Corp. All Rights Reserved.
 *
 * This SOURCE CODE FILE, which has been provided by Borland as part
 * of a Borland product for use ONLY by licensed users of the product,
 * includes CONFIDENTIAL and PROPRIETARY information of Borland.
 *
 * USE OF THIS SOFTWARE IS GOVERNED BY THE TERMS AND CONDITIONS
 * OF THE LICENSE STATEMENT AND LIMITED WARRANTY FURNISHED WITH
 * THE PRODUCT.
 *
 * IN PARTICULAR, YOU WILL INDEMNIFY AND HOLD BORLAND, ITS RELATED
 * COMPANIES AND ITS SUPPLIERS, HARMLESS FROM AND AGAINST ANY
 * CLAIMS OR LIABILITIES ARISING OUT OF THE USE, REPRODUCTION, OR
 * DISTRIBUTION OF YOUR PROGRAMS, INCLUDING ANY CLAIMS OR LIABILITIES
 * ARISING OUT OF OR RESULTING FROM THE USE, MODIFICATION, OR
 * DISTRIBUTION OF PROGRAMS OR FILES CREATED FROM, BASED ON, AND/OR
 * DERIVED FROM THIS SOURCE CODE FILE.
 */
//--------------------------------------------------------------------------------------------------
// Copyright (c) 1996 - 2004 Borland Software Corporation. All Rights Reserved.
//--------------------------------------------------------------------------------------------------
package com.borland.dbswing;

import java.io.*;
import java.util.*;

import java.awt.*;
import java.awt.event.*;

import com.borland.dx.dataset.*;
import com.borland.dx.dataset.Resolver;
import com.borland.dx.sql.dataset.*;
import com.borland.jb.util.*;

/**
 * <p>A non-visible component that listens for and
 * sends <code>DataSet</code> event information to a <code>PrintStream</code> (by default, the
 * <code>stdout</code> device).  It is intended to be used as an unobstrusive
 * debugging aid for applications which process <code>DataSet</code> events.  It
 * also provides a simple and interactive way to learn about the kinds
 * of events generated by <code>DataSets</code> and when they are fired.  A single
 * <code>DBEventMonitor</code> can be used to display messages from several
 * <code>DataSets</code>.  You can selectively monitor events you are interested in
 * by setting <code>DBEventMonitor</code> properties.</p>
 *
 * <p>There are three ways to set up a <code>DBEventMonitor</code> for use in your
 * application:
 *
 * <ul>
 * <li>For monitoring events generated by user interaction
 * with visual components, the simplest way is to set the
 * <code>dataAwareComponentContainer</code> property to the container
 * (usually a <code>JFrame,</code> but could also be a <code>JPanel</code>) containing the
 * <code>DataSets</code> whose events you wish to monitor.  <code>DBEventMonitor</code> will
 * then automatically search for components inside the container,
 * adding itself as an event listener to any DataSets and Columns it
 * finds.  </li>
 *
 * <li>You can explicitly specify an array of
 * data-aware components to monitor using the <code>dataSetAwareComponents</code>
 * property.  When using this approach, however, be sure that each
 * data-aware component you specify has already had its <code>dataSet</code>
 * property set, as <code>DBEventMonitor</code> immediately asks each
 * component for its <code>DataSet</code> value and cannot monitor a
 * component if its <code>dataSet</code> property has not yet been set.</li>
 *
 * <li>For monitoring <code>DataSets</code> in a non-visual application,
 * you can set the <code>dataSets</code> property to an array of <code>DataSets</code>
 * you wish to monitor.  Note that when monitoring events via the
 * <code>dataSets</code> property, event listeners are registered
 * for <code>DataSet</code> events only, and not <code>Column,</code> events.</li>
 * </ul>
 *
 * <p>Monitoring for almost all the events is enabled by default. The exceptions are <code>ColumnPaint</code> and
<code>RowFilter,</code> which produce considerable output that you aren't likely to find useful. Also
<code>CalcAggFields</code> and <code>CalcFields</code> aren't monitored by default unless there is a <code>CalcAggFields</code> or <code>CalcFields</code> listener attached to the DataSet. </p>
 *
 * <p>To prevent the monitoring of specific events, set the property that enables monitoring to false. For
example, to prevent the monitoring of DataChangeEvents, set enableDataChangeListener to
false.  </p>
 *
 * <p> Note that for some events, only a single event listener can be
 * registered (e.g. <code>ColumnChangeListener</code>). In these cases, if an
 * event listener has already been registered and if it is possible to
 * get a reference to the existing event listener, <code>DBEventMonitor</code>
 * registers itself as the single event listener and forwards the
 * event to the original event listener.  Where it is not possible to get areference to the existing event listener,
 * <code>DBEventMonitor</code> cannot monitor the event and outputs
 * a message indicating so. Setting the
 * <code>dataAwareComponentContainer</code> or <code>dataSetAwareComponents</code>
 * property to null removes <code>DBEventMonitor</code> from the event-listener chain and restore the original event listeners.</p>
 *
 *<p>
 * If you are debugging an application and it can't register
 * its event listeners because <code>DBEventMonitor</code> has already registered
 * itself as a listener, you must arrange for the
 * <code>dataSetAwareComponents</code>, <code>dataAwareComponentContainer</code>,
 * or <code>dataSets</code> property to be set after all your listeners
 * have already been registered.  In particular, to monitor
 * <code>CalcFields</code> or <code>CalcAggFields</code> events, you must ensure that your
 * listeners are already registered before <code>DBEventMonitor,</code> as
 * <code>DBEventMonitor</code> doesn't register itself as a <code>CalcFields</code> or
 * <code>CalcAggFields</code> listener unless another listener has already
 * been registered.</p>
 *
 *<p>When using the <code>dataAwareComponentContainer</code> property, note
 * that <code>DBEventMonitor</code> waits until after the container and its
 * contents have been realized before attaching itself as an event
 * listener.  By this time, any <code>DataSets</code> attached to data-aware
 * components will have already been opened, and <code>DBEventMonitor</code>
 * has missed some events.  If you need to monitor
 * such events, use either the <code>dataSets</code> or
 * <code>dataSetAwareComponents</code> properties.
 */
public class DBEventMonitor
  implements AccessListener, ColumnChangeListener, ColumnPaintListener,
             DataChangeListener, EditListener, LoadListener,
             NavigationListener, OpenListener, Designable,
             StatusListener, ComponentListener, java.io.Serializable
{

 /**
  * <p>Creates a <code>DBEventMonitor</code> component.</p>
  *
  */
  public DBEventMonitor() {
  }

  /**
   * <p>Sets the <code>PrintStream</code> used for event output.  By default,
   * <code>System.out</code> is used.</p>
   *
   * @param out The <code>PrintStream</code>.
   * @see #getPrintStream()
   *
   */
  public void setPrintStream(PrintStream out) {
    this.out = out;
  }

  /**
   * <p>Returns the <code>PrintStream</code> used for event output.</p>
   *
   * @return The <code>PrintStream</code>.
   * @see #setPrintStream(PrintStream out)
   */
  public PrintStream getPrintStream() {
    return out;
  }

  /**
   * <p>Sets an array of <code>DataSets</code> that <code>DBEventMonitor</code> should monitor.
   * If this property and either the <code>dataSetAwareComponents</code> or
   * <code>dataAwareComponentContainer</code>property are set
   * simulatenously, the most recently set property takes precedence.</p>
   *
   * @param userSetDataSets An arry of <code>DataSets</code> to monitor.
   * @see #getDataSets
   */
  public void setDataSets(DataSet [] userSetDataSets) {
    this.userSetDataSets = userSetDataSets;
    bindDataSets(userSetDataSets);
  }

  /**
   * <p>Returns the array of <code>DataSets</code> that <code>DBEventMonitor</code> should
   * monitor.</p>
   *
   * @return Am array of <code>DataSets</code>.
   * @see #setDataSets
   */
  public DataSet [] getDataSets() {
    return userSetDataSets;
  }

  /**
   * <p>Sets the container of data-aware components that <code>DBEventMonitor</code>
   * should monitor. If this property and either the
   * <code>dataSetAwareComponents</code> or <code>dataSets</code>property are set
   * simultaneously, the most recently set property takes precedence.</p>
   *
   * @param container The container of data-aware components.
   * @see #getDataAwareComponentContainer
   */
  public void setDataAwareComponentContainer(Container container) {
    if (this.container != container && this.container != null) {
      this.container.removeComponentListener(this);
    }
    this.container = container;
    registeredContainer = false;
    if (container != null) {
      container.addComponentListener(this);
    }
    else {
      registerWithDataAwareComponents(null);
    }
  }

  /**
   * <p>Returns the container of data-aware components that <code>DBEventMonitor</code>
   * should monitor.</p>
   *
   * @return The array of data-aware components.
   * @see #setDataAwareComponentContainer
   */
  public Container getDataAwareComponentContainer() {
    return container;
  }

  //
  // ComponentListener interface implementation
  //

  public void componentResized(ComponentEvent e) {}
  public void componentMoved(ComponentEvent e) {}
  public void componentHidden(ComponentEvent e) {}

  public void componentShown(ComponentEvent e) {
    if (!registeredContainer && e.getID() == ComponentEvent.COMPONENT_SHOWN) {
      registerWithDataAwareComponents(DBUtilities.findDataAwareComponents(container));
      registeredContainer = true;
    }
  }


  /**
   * <p>Sets the array of data-aware components that <code>DBEventMonitor</code>
   * should monitor. If this property and either the
   * <code>dataAwareComponentContainer</code> or <code>dataSets</code>property are
   * set simulatenously, the most recently set property takes
   * precedence.</p>
   *
   * @param dataAwareComponents The array of data-aware components.
   * @see #getDataSetAwareComponents
   */
  public void setDataSetAwareComponents(DataSetAware [] dataAwareComponents) {
    userSetDataAwareComponents = dataAwareComponents;
    registerWithDataAwareComponents(userSetDataAwareComponents);
  }

  /**
   * <p>Returns the array of data-aware components that <code>DBEventMonitor</code>
   * should monitor.</p>
   *
   * @return The array of data-aware components.
   * @see #setDataSetAwareComponents
   */
  public DataSetAware [] getDataSetAwareComponents() {
    return userSetDataAwareComponents;
  }

  /**
   * <p>Extracts <code>DataSets</code> from <code>dataSetAwareComponents</code> and passes them to
   * <code>bindDataSets</code> for <code>DataSet</code>-level event binding.  Also binds
   * itself as a <code>Column</code>-level event listener.</p>
   */
  private void registerWithDataAwareComponents(DataSetAware [] dataAwareComponents) {
    // unregister ourself as a Column-level event listener from the previous set of columns
    if (this.dataAwareComponents != null) {
      for (int index = 0; index < this.dataAwareComponents.length; index++) {
        if (this.dataAwareComponents[index] != null &&
            this.dataAwareComponents[index] instanceof ColumnAware) {
          DataSet dataSet = ((ColumnAware) this.dataAwareComponents[index]).getDataSet();
          if (dataSet != null) {
            String dataSetName = dataSet.getTableName();
            String columnName = ((ColumnAware) this.dataAwareComponents[index]).getColumnName();

            try {
              Column column = dataSet.getColumn(columnName);

              if (column.getColumnChangeListener() == this) {
                column.removeColumnChangeListener(this);
                Object listener;
                if ((listener = columnChangeListeners.get(column)) != null) {
                  try {
                    column.addColumnChangeListener((ColumnChangeListener) listener);
                  } catch (Exception e) {
                    out.println(java.text.MessageFormat.format(Res._ColChangeError,     
		                                        new String[] {getEventLabel(), columnName, dataSetName}));
                  }
                  columnChangeListeners.remove(column);
                }
              }

              if (column.getColumnPaintListener() == this) {
                column.removeColumnPaintListener(this);
                Object listener;
                if ((listener = columnPaintListeners.get(column)) != null) {
                  try {
                    column.addColumnPaintListener((ColumnPaintListener) listener);
                  } catch (Exception e) {
                    out.println(java.text.MessageFormat.format(Res._ColPaintError,     
		                                        new String[] {getEventLabel(), columnName, dataSetName}));
                  }
                  columnPaintListeners.remove(column);
                }
              }
            } catch (DataSetException e) {
              out.println(java.text.MessageFormat.format(Res._UnregisterError,     
	                                          new String[] {getEventLabel(), columnName, dataSetName}));
            }
          }
        }
      }
    }

    this.dataAwareComponents = dataAwareComponents;

    HashSet uniqueDataSets = new HashSet(10);
    if (dataAwareComponents != null) {
      for (int index = 0; index < dataAwareComponents.length; index++) {
        // register ourself as a Column-level event listener for the new set of columns
        if (dataAwareComponents[index] != null &&
            dataAwareComponents[index] instanceof ColumnAware) {
          DataSet dataSet = ((ColumnAware) dataAwareComponents[index]).getDataSet();
          if (dataSet != null) {
            String dataSetName = dataSet.getTableName();
            String columnName = ((ColumnAware) dataAwareComponents[index]).getColumnName();

            if (columnName == null) {  // for JdbNavField, which may have a null columnName
              continue;
            }
            try {
              Column column = dataSet.getColumn(columnName);

              ColumnChangeListener columnChangeListener = column.getColumnChangeListener();
              if (columnChangeListener != null) {
                columnChangeListeners.put(column, columnChangeListener);
                column.removeColumnChangeListener(columnChangeListener);
              }
              try {
                column.addColumnChangeListener(this);
              } catch (Exception e) {
                out.println(java.text.MessageFormat.format(Res._ColChangeRegError,     
		                                    new String[] {getEventLabel(), columnName, dataSetName}));
              }

              ColumnPaintListener paintListener = column.getColumnPaintListener();
              if (paintListener != null) {
                columnPaintListeners.put(column, paintListener);
                column.removeColumnPaintListener(paintListener);
              }
              try {
                column.addColumnPaintListener(this);
              } catch (Exception e) {
                out.println(java.text.MessageFormat.format(Res._ColPaintRegError,     
		                                    new String[] {getEventLabel(), columnName, dataSetName}));
              }
            } catch (DataSetException e) {
              out.println(java.text.MessageFormat.format(Res._ColRegError,     
	                                          new String[] {getEventLabel(), columnName, dataSetName}));
            }
          }
        }

        if (dataAwareComponents[index] != null) {
          DataSet dataSet = dataAwareComponents[index].getDataSet();
          if (dataSet != null) {
            uniqueDataSets.add(dataSet);
          }
        }
      }
    }

    DataSet [] dataSets = new DataSet[uniqueDataSets.size()];
    Iterator iterator = uniqueDataSets.iterator();
    for (int index = 0; iterator.hasNext(); index++) {
      dataSets[index] = (DataSet) iterator.next();
    }
    bindDataSets(dataSets);
  }

  /**
   * <p>Adds <code>DBEventMonitor</code> as an event listener to each of the given <code>dataSets</code>.</p>
   */
  private void bindDataSets(DataSet [] dataSets) {
    DataSet [] oldDataSets = this.dataSets;
    if (oldDataSets != null) {
      // unregister ourself as an event listener from the old set of DataSets
      for (int index = 0; index < oldDataSets.length; index++) {
        DataSet dataSet = oldDataSets[index];
        if (dataSet == null) {
          continue;
        }
        String dataSetName = dataSet.getTableName();
        StorageDataSet sDataSet = null;

        if (dataSet instanceof StorageDataSet) {
          sDataSet = (StorageDataSet) dataSet;
        }

        // multicast DataSet event sources
        dataSet.removeAccessListener(this);
        dataSet.removeDataChangeListener(this);
        dataSet.removeNavigationListener(this);
        dataSet.removeStatusListener(this);

        // unicast DataSet event sources
        if (((Boolean) openListeners.get(dataSet)).booleanValue() == true) {
          dataSet.removeOpenListener(this);
          openListeners.remove(dataSet);
        }

        try {
          RowFilterListener rfl = (RowFilterListener) innerRowFilterListeners.get(dataSet);
          if (dataSet.getRowFilterListener() == rfl && rfl != null) {
            dataSet.removeRowFilterListener(rfl);
            if (rowFilterListeners.get(dataSet) != null) {
              dataSet.addRowFilterListener((RowFilterListener) rowFilterListeners.get(dataSet));
              rowFilterListeners.remove(dataSet);
              innerRowFilterListeners.remove(dataSet);
            }
          }
        } catch (Exception e) {
          out.println(java.text.MessageFormat.format(Res._RowFiltUnRegError, new String[] {getEventLabel(), dataSetName}));     
        }

        if (sDataSet != null) {
          // multicast StorageDataSet event sources
          sDataSet.removeLoadListener(this);

          // unicast StorageDataSet event sources
          CalcAggFieldsListener cafl = (CalcAggFieldsListener) innerCalcAggFieldsListeners.get(sDataSet);
          if (sDataSet.getCalcAggFieldsListener() == cafl && cafl != null) {
            try {
              sDataSet.removeCalcAggFieldsListener(cafl);
              if (calcAggFieldsListeners.get(sDataSet) != null) {
                sDataSet.addCalcAggFieldsListener((CalcAggFieldsListener) calcAggFieldsListeners.get(sDataSet));
                calcAggFieldsListeners.remove(sDataSet);
                innerCalcAggFieldsListeners.remove(sDataSet);
              }
            } catch (Exception e) {
              out.println(java.text.MessageFormat.format(Res._CalcAggFiltUnRegError,     
	                                          new String[] {getEventLabel(), dataSetName}));
            }
          }

          CalcFieldsListener cfl = (CalcFieldsListener) innerCalcFieldsListeners.get(sDataSet);
          if (sDataSet.getCalcFieldsListener() == cfl && cfl != null) {
            try {
              sDataSet.removeCalcFieldsListener(cfl);
              if (calcFieldsListeners.get(sDataSet) != null) {
                sDataSet.addCalcFieldsListener((CalcFieldsListener) calcFieldsListeners.get(sDataSet));
                calcFieldsListeners.remove(sDataSet);
                innerCalcFieldsListeners.remove(sDataSet);
              }
            } catch (Exception e) {
              out.println(java.text.MessageFormat.format(Res._CalcFieldsUnRegError,     
	                                          new String[] {getEventLabel(), dataSetName}));
            }
          }

          try {
            sDataSet.removeEditListener(this);
          } catch (IllegalArgumentException x) {
            // happens if we weren't the registered edit listener
          }

          Resolver resolver = sDataSet.getResolver();
          if (resolver instanceof SQLResolver) {
            SQLResolver sqlResolver = (SQLResolver) resolver;
            ResolverListener rl = (ResolverListener) innerResolverListeners.get(sDataSet);
            if (sqlResolver.fetchResolverListener() == rl && rl != null) {
              try {
                sqlResolver.removeResolverListener(rl);
                if (resolverListeners.get(sDataSet) != null) {
                  sqlResolver.addResolverListener((ResolverListener) resolverListeners.get(sDataSet));
                  resolverListeners.remove(sDataSet);
                  innerResolverListeners.remove(sDataSet);
                }
              } catch (Exception e) {
                out.println(java.text.MessageFormat.format(Res._ResolveUnRegError,     
		                                    new String[] {getEventLabel(), dataSetName}));
              }
            }
          }
        }
      }
    }
    this.dataSets = dataSets;

    if (dataSets != null) {
      // register ourself as an event listener ont the new set of DataSets
      for (int index = 0; index < dataSets.length; index++) {
        DataSet dataSet = dataSets[index];
        if (dataSet == null) {
          continue;
        }
        String dataSetName = dataSet.getTableName();
        StorageDataSet sDataSet = null;

        if (dataSet instanceof StorageDataSet) {
          sDataSet = (StorageDataSet) dataSet;
        }

        // multicast DataSet event sources
        dataSet.addAccessListener(this);
        dataSet.addDataChangeListener(this);
        dataSet.addNavigationListener(this);
        dataSet.addStatusListener(this);

        // unicast DataSet event sources
        try {
          dataSet.addOpenListener(this);
          openListeners.put(dataSet, Boolean.TRUE);
        } catch (Exception e) {
          out.println(java.text.MessageFormat.format(Res._OpenRegError, new String[] {getEventLabel(), dataSetName}));     
          openListeners.put(dataSet, Boolean.FALSE);
        }

        try {
          RowFilterListener rowFilterListener = dataSet.getRowFilterListener();
          if (rowFilterListener != null) {
            rowFilterListeners.put(dataSet, rowFilterListener);
            dataSet.removeRowFilterListener(rowFilterListener);
          }
          RowFilterListener rfl = new InnerRowFilterListener(dataSet);
          innerRowFilterListeners.put(dataSet, rfl);
          dataSet.addRowFilterListener(rfl);
        } catch (Exception e) {
          out.println(java.text.MessageFormat.format(Res._RowFiltRegError, new String[] {getEventLabel(), dataSetName}));     
        }

        if (sDataSet != null) {
          // multicast StorageDataSet event sources
          sDataSet.addLoadListener(this);

          // unicast StorageDataSet event sources
          try {
            CalcAggFieldsListener calcAggFieldsListener = sDataSet.getCalcAggFieldsListener();
            if (calcAggFieldsListener != null) {
              calcAggFieldsListeners.put(sDataSet, calcAggFieldsListener);
              sDataSet.removeCalcAggFieldsListener(calcAggFieldsListener);
              CalcAggFieldsListener cafl = new InnerCalcAggFieldsListener(sDataSet);
              innerCalcAggFieldsListeners.put(sDataSet, cafl);
              sDataSet.addCalcAggFieldsListener(cafl);
            }
          } catch (Exception e) {
            out.println(java.text.MessageFormat.format(Res._CalcAggFieldRegError, new String[] {getEventLabel(), dataSetName}));     
          }

          try {
            CalcFieldsListener calcFieldsListener = sDataSet.getCalcFieldsListener();
            if (calcFieldsListener != null) {
              calcFieldsListeners.put(sDataSet, calcFieldsListener);
              sDataSet.removeCalcFieldsListener(calcFieldsListener);
              CalcFieldsListener cfl = new InnerCalcFieldsListener(sDataSet);
              innerCalcFieldsListeners.put(sDataSet, cfl);
              sDataSet.addCalcFieldsListener(cfl);
            }
          } catch (Exception e) {
            out.println(java.text.MessageFormat.format(Res._CalcFieldRegError, new String[] {getEventLabel(), dataSetName}));     
          }

          try {
            sDataSet.addEditListener(this);
          } catch (Exception e) {
            out.println(java.text.MessageFormat.format(Res._EditRegError, new String[] {getEventLabel(), dataSetName}));     
          }

          try {
            Resolver resolver = sDataSet.getResolver();
            if (resolver instanceof SQLResolver) {
              SQLResolver sqlResolver = (SQLResolver) resolver;
              ResolverListener resolverListener = sqlResolver.fetchResolverListener();
              if (resolverListener != null) {
                resolverListeners.put(sDataSet, resolverListener);
                sqlResolver.removeResolverListener(resolverListener);
              }
              ResolverListener rl = new InnerResolverListener(sDataSet);
              innerResolverListeners.put(sDataSet, rl);
              sqlResolver.addResolverListener(rl);
            }
          } catch (Exception e) {
            out.println(java.text.MessageFormat.format(Res._ResolverRegError, new String[] {getEventLabel(), dataSetName}));     
          }
        }
      }
    }
  }

  //
  // Event Listener implementations
  //

  //
  // AccessListener implementation
  //

  public void accessChange(AccessEvent event) {

    if (!enabled || !enableAccessListener) {
      return;
    }

    DataSet dataSet = (DataSet) event.getSource();
    String reason = ""; 
    String reasonDetail = ""; 
    switch(event.getID()) {
    case AccessEvent.OPEN:
      reason = java.text.MessageFormat.format(Res._AccessEventReason, new String[] {"AccessEvent.OPEN"});       //RES AccessEventReason,NORES
      switch (event.getReason()) {
      case AccessEvent.UNSPECIFIED:
        reasonDetail = "AccessEvent.UNSPECIFIED"; 
        break;
      case AccessEvent.DATA_CHANGE:
        reasonDetail = "AccessEvent.DATA_CHANGE"; 
        break;
      case AccessEvent.COLUMN_ADD:
        reasonDetail = java.text.MessageFormat.format(Res._AccessAdd,     
	               new String[] {"AccessEvent.COLUMN_ADD", event.getNewColumn().getColumnName()}); 
        break;
      case AccessEvent.COLUMN_DROP:
        reasonDetail = java.text.MessageFormat.format(Res._AccessDrop,     
	               new String[] {"AccessEvent.COLUMN_DROP", event.getDropColumn().getColumnName()}); 
        break;
      case AccessEvent.COLUMN_CHANGE:
        reasonDetail = java.text.MessageFormat.format(Res._AccessChange,     
	               new String[] {"AccessEvent.COLUMN_CHANGE", 
                                     event.getOldColumn().getColumnName(),
				     event.getNewColumn().getColumnName()});
        break;
      case AccessEvent.COLUMN_MOVE:
        reasonDetail = java.text.MessageFormat.format(Res._AccessChange,     
	               new Object[] {"AccessEvent.COLUMN_MOVE", 
                                     new Integer(event.getOldOrdinal()),
				     new Integer(event.getNewOrdinal())});
        break;

      }
      break;
    case AccessEvent.CLOSE:
      reason = java.text.MessageFormat.format(Res._AccessEventReason,     
                                       new String[] {"AccessEvent.CLOSE"}); 
      switch(event.getReason()) {
      case AccessEvent.UNKNOWN:
        reasonDetail = "AccessEvent.UNKNOWN"; 
        break;
      case AccessEvent.STRUCTURE_CHANGE:
        reasonDetail = "AccessEvent.STRUCTURE_CHANGE"; 
        break;
      case AccessEvent.PROPERTY_CHANGE:
        reasonDetail = "AccessEvent.PROPERTY_CHANGE"; 
        break;
      }
      break;
    default:
      reason = Res._UnknownReason;     
      break;
    }
    out.println(getEventLabel() + " source: " + dataSet.getTableName() + 
      " AccessListener.accessChange() " + reason + ", " + reasonDetail); 
  }

  //
  // CalcAggFieldsListener
  //
  class InnerCalcAggFieldsListener implements CalcAggFieldsListener {
    DataSet dataSet;

    public InnerCalcAggFieldsListener(DataSet source) {
      this.dataSet = source;
    }

    public void calcAggAdd(ReadRow row, ReadWriteRow resultRow) throws DataSetException {
      if (calcAggFieldsListeners.get(dataSet) != null) {
        try {
          ((CalcAggFieldsListener) calcAggFieldsListeners.get(dataSet)).calcAggAdd(row, resultRow);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown,     
	                    new Object[] {getEventLabel() +
                                          " source: " + dataSet.getTableName() + ", CalcAggFieldsListener.calcAggAdd()", e})); 
          throw e;
        }
      }
      if (enabled && enableCalcAggFieldsListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + ", CalcAggFieldsListener.calcAggAdd(row: " + 
                    row + ", resultRow: " + resultRow + ")"); 
      }
    }

    public void calcAggDelete(ReadRow row, ReadWriteRow resultRow) throws DataSetException {
      if (calcAggFieldsListeners.get(dataSet) != null) {
        try {
          ((CalcAggFieldsListener) calcAggFieldsListeners.get(dataSet)).calcAggDelete(row, resultRow);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " +  dataSet.getTableName() + ", CalcAggFieldsListener.calcAggDelete()", e})); 
          throw e;
        }
      }
      if (enabled && enableCalcAggFieldsListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + ", CalcAggFieldsListener.calcAggDelete(row: " + 
                    row + ", resultRow: " + resultRow + ")"); 
      }
    }

  }

  //
  // CalcFieldsListener
  //
  class InnerCalcFieldsListener implements CalcFieldsListener {
    DataSet dataSet;

    public InnerCalcFieldsListener(DataSet source) {
      this.dataSet = source;
    }

    public void calcFields(ReadRow changedRow, DataRow calcRow, boolean isPosted) throws DataSetException {
      if (enabled && enableCalcFieldsListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + ", CalcFieldsListener.calcFields(changedRow: " + 
                    changedRow + ", calcRow: " + calcRow + ", isPosted: " + isPosted); 
      }
      if (calcFieldsListeners.get(dataSet) != null) {
        try {
          ((CalcFieldsListener) calcFieldsListeners.get(dataSet)).calcFields(changedRow, calcRow, isPosted);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " +  dataSet.getTableName() + ", CalcFieldsListener.calcFields()", e})); 
          throw e;
        }
      }
    }
  }

  //
  // ColumnChangeListener
  //
  public void validate(DataSet dataSet, Column column, Variant value) throws Exception, DataSetException {
    if (enabled && enableColumnChangeListener) {
      out.println(getEventLabel() + " ColumnChangeListener.validate(dataSet: " + dataSet.getTableName() + 
        ", column: " + column + ", value: " + value); 
    }
    if (columnChangeListeners.get(column) != null) {
      try {
        ((ColumnChangeListener) columnChangeListeners.get(column)).validate(dataSet, column, value);
      } catch (Exception e) {
        out.println(java.text.MessageFormat.format(Res._ExThrown,     
	    new Object[] {getEventLabel() + " source: ColumnChangeListener.validate()", e})); 
        throw e;
      }
    }
  }

  public void changed(DataSet dataSet, Column column, Variant value) throws DataSetException {
    if (enabled && enableColumnChangeListener) {
      out.println(getEventLabel() +  " ColumnChangeListener.changed(dataSet: " + dataSet.getTableName() + 
        ", column: " + column + ", value: " + value); 
    }
    if (columnChangeListeners.get(column) != null) {
      try {
        ((ColumnChangeListener) columnChangeListeners.get(column)).changed(dataSet, column, value);
      } catch (DataSetException e) {
        out.println(java.text.MessageFormat.format(Res._ExThrown,     
	        new Object[] {getEventLabel() +  " source: ColumnChangeListener.changed()", e})); 
        throw e;
      }
    }
  }

  //
  // ColumnPaintListener
  //
  public void painting(DataSet dataSet, Column column, int row, Variant value, CustomPaintSite paintSite) {
    if (enabled && enableColumnPaintListener) {
      out.println(getEventLabel() + " ColumnPaintListener.painting(dataSet: " +  dataSet.getTableName() + 
        ", column: " +  column + ", row: " + row + ", value: " +  value + ", paintSite: " + paintSite); 
    }
    if (columnPaintListeners.get(column) != null) {
      ((ColumnPaintListener) columnPaintListeners.get(column)).painting(dataSet, column, row, value, paintSite);
    }
  }

  public void editing(DataSet dataSet, Column column, CustomPaintSite paintSite) {
    if (enabled && enableColumnPaintListener) {
      out.println(getEventLabel() + " ColumnPaintListener.editing(dataSet: " + dataSet.getTableName() + ", column: " + column + 
                  ", paintSite: " + paintSite + ")"); 
    }
    if (columnPaintListeners.get(column) != null) {
      ((ColumnPaintListener) columnPaintListeners.get(column)).editing(dataSet, column, paintSite);
    }
  }

  //
  // DataChangeListener
  //
  public void dataChanged(DataChangeEvent event) {
    if (!enabled || !enableDataChangeListener) {
      return;
    }
    DataSet dataSet = (DataSet) event.getSource();
    out.print(getEventLabel() + "source: " + dataSet.getTableName() + " DataChangeListener.dataChanged: "); 
    switch (event.getID()) {
      case DataChangeEvent.ROW_ADDED:
        out.println("DataChangeEvent.ROW_ADDED, rowAffected: " + event.getRowAffected()); 
        break;
      case DataChangeEvent.ROW_DELETED:
        out.println("DataChangeEvent.ROW_DELETED, rowAffected: " + event.getRowAffected()); 
        break;
      case DataChangeEvent.ROW_CHANGED:
        out.println("DataChangeEvent.ROW_CHANGED, rowAffected: " + event.getRowAffected()); 
        break;
      case DataChangeEvent.ROW_CHANGE_POSTED:
        out.println("DataChangeEvent.ROW_CHANGE_POSTED, rowAffected: " + event.getRowAffected()); 
        break;
      case DataChangeEvent.DATA_CHANGED:
        if ( event.getRowAffected() == -1 ) {
          out.println(java.text.MessageFormat.format(Res._MultipleRows,     
	  new String[] {"DataChangeEvent.DATA_CHANGED"})); 
        }
        else {
          out.println("DataChangeEvent.DATA_CHANGED, rowAffected: "+ event.getRowAffected()); 
        }
        break;
      case DataChangeEvent.POST_ROW:
        out.println("DataChangeEvent.POST_ROW, rowAffected: " + event.getRowAffected()); 
        break;
      default:
        out.println(Res._DataChangeEventUnknown);     
        break;
    }
  }

  public void postRow(DataChangeEvent event) throws Exception {
    if (!enabled || !enableDataChangeListener) {
      return;
    }
    DataSet dataSet = (DataSet) event.getSource();
    out.print(getEventLabel() + " source: " +  dataSet.getTableName() +  " DataChangeListener.postRow(): "); 
    if (event.getID() == DataChangeEvent.POST_ROW) {
      out.println("DataChangeEvent.POST_ROW, rowAffected: " + event.getRowAffected()); 
    }
    else {
      out.println(Res._DataChangeEventUnknown);     
    }
  }

  //
  // EditListener
  //
  public void canceling(DataSet dataSet) throws Exception {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.canceling(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void updating(DataSet dataSet, ReadWriteRow newRow, ReadRow oldRow) throws Exception {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.updating(dataSet: " + dataSet.getTableName() + 
                  ", newRow: " + newRow + ", oldRow: " + oldRow + ")"); 
    }
  }

  public void updated(DataSet dataSet) throws DataSetException {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.updated(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void adding(DataSet dataSet, ReadWriteRow newRow) throws Exception {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.adding(dataSet: " + dataSet.getTableName() + 
                  ", newRow: " + newRow + ")"); 
    }
  }

  public void added(DataSet dataSet) throws DataSetException {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.added(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void deleting(DataSet dataSet) throws Exception {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.deleting(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void deleted(DataSet dataSet) throws DataSetException {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.deleted(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void modifying(DataSet dataSet) throws Exception {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.modifying(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void inserting(DataSet dataSet) throws Exception {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.inserting(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void inserted(DataSet dataSet) throws DataSetException {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.inserted(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void editError(DataSet dataSet, Column column, Variant value, DataSetException ex, ErrorResponse response) throws DataSetException {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() +  " EditListener.editError(dataSet: " + dataSet.getTableName() + 
                  ", column: " + column + ", value: " + value + ", dataSetException: " + ex + ", response: ErrorResponse.ABORT)"); 
    }
    response.abort();
  }

  public void addError(DataSet dataSet, ReadWriteRow row, DataSetException ex, ErrorResponse response) throws DataSetException {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() +  "] EditListener.addError(dataSet: " + dataSet.getTableName() + 
                  ", row: " + row + ", dataSetException: " + ex + ", response: ErrorResponse.ABORT)"); 
    }
    response.abort();
  }

  public void updateError(DataSet dataSet, ReadWriteRow row, DataSetException ex, ErrorResponse response) throws DataSetException {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.updateError(dataSet: " + dataSet.getTableName() + 
                  ", row: " + row + ", dataSetException: " + ex + ", response: ErrorResponse.ABORT)"); 
    }
    response.abort();
  }

  public void deleteError(DataSet dataSet, DataSetException ex, ErrorResponse response) throws DataSetException {
    if (enabled && enableEditListener) {
      out.println(getEventLabel() + " EditListener.deleteError(dataSet: " + dataSet.getTableName() + 
                  ", dataSetException: " + ex + ", response: ErrorResponse.ABORT)"); 
    }
    response.abort();
  }

  //
  // LoadListener
  //
  public void dataLoaded(LoadEvent event) {
    if (enableLoadListener) {
      DataSet dataSet = (DataSet) event.getSource();
      out.println(getEventLabel() + " source: " +  dataSet.getTableName() +  " LoadListener.dataLoaded()"); 
    }
  }

  //
  // NavigationListener implementation
  //
  public void navigated(NavigationEvent event) {
    if (enableNavigationListener ) {
      DataSet dataSet = (DataSet) event.getSource();
      out.println(getEventLabel() + " source: " + dataSet.getTableName() + ", NavigateListener.navigated()"); 
    }
  }

  //
  // OpenListener implementation
  //
  public void opening(DataSet dataSet) throws DataSetException {
    if (enableOpenListener) {
      out.println(getEventLabel() + " OpenListener.opening(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void opened(DataSet dataSet) throws DataSetException {
    if (enableOpenListener) {
      out.println(getEventLabel() + " OpenListener.opened(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void closing(DataSet dataSet) throws DataSetException {
    if (enableOpenListener) {
      out.println(getEventLabel() + " OpenListener.closing(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  public void closed(DataSet dataSet) throws DataSetException {
    if (enableOpenListener) {
      out.println(getEventLabel() + " OpenListener.closed(dataSet: " + dataSet.getTableName() + ")"); 
    }
  }

  //
  // ResolverListener implementation
  //
  class InnerResolverListener implements ResolverListener {
    DataSet dataSet;

    public InnerResolverListener(DataSet source) {
      this.dataSet = source;
    }

    public void insertingRow(ReadWriteRow row, ResolverResponse response) throws DataSetException {
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).insertingRow(row, response);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " + dataSet.getTableName() +  ", ResolverListener.insertingRow()", e})); 
          throw e;
        }
      }
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + 
                    ", ResolverListener.insertingRow(row: " + row + ", response." + 
                    (response.isResolve() ? "isResolver" : (response.isSkip() ? 
                                                            "isSkip" : "isAbort")) + "())"); 
      }
    }

    public void deletingRow(ReadWriteRow row, ResolverResponse response) throws  DataSetException {
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).deletingRow(row, response);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel()     
            + " source: " +  dataSet.getTableName() + ", ResolverListener.deletingRow()", e})); 
          throw e;
        }
      }
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + 
                    ", ResolverListener.deletingRow(row: " + row + ", response." + 
                    (response.isResolve() ? "isResolver" : (response.isSkip() ? 
                                                            "isSkip" : "isAbort")) + "())"); 
      }
    }

    public void updatingRow(ReadWriteRow row, ReadRow oldRow, ResolverResponse response)  throws DataSetException {
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).updatingRow(row, oldRow, response);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " + dataSet.getTableName() + ", ResolverListener.updatingRow()", e})); 
          throw e;
        }
      }
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() +  
                    ", ResolverListener.updatingRow(row: " + row + ", oldRow: " + oldRow + 
                    ", response." + (response.isResolve() ? "isResolver" : (response.isSkip() ? 
                                                                            "isSkip" : "isAbort")) + "())"); 
      }
    }

    public void insertedRow(ReadWriteRow row) throws DataSetException {
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + 
                    ", ResolverListener.insertedRow(row: " + row); 
      }
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).insertedRow(row);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " + dataSet.getTableName() + ", ResolverListener.insertedRow()", e})); 
          throw e;
        }
      }
    }

    public void deletedRow(ReadWriteRow row) throws DataSetException {
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + 
                    ", ResolverListener.deletedRow(row: " + row); 
      }
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).deletedRow(row);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " +  dataSet.getTableName() + ", ResolverListener.deletingRow()", e})); 
          throw e;
        }
      }
    }

    public void updatedRow(ReadWriteRow row, ReadRow oldRow) throws DataSetException {
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + 
                    ", ResolverListener.updatedRow(row: " + row + ", oldRow: " + oldRow); 
      }
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).updatedRow(row, oldRow);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " +  dataSet.getTableName() +  ", ResolverListener.updatedRow()", e})); 
          throw e;
        }
      }
    }

    public void insertError(DataSet dataSet, ReadWriteRow row, DataSetException ex, ErrorResponse response) throws DataSetException {
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).insertError(dataSet, row, ex, response);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ResolverInsertError,     
	    new Object [] {getEventLabel() + " source: ", 
            dataSet.getTableName(), "ResolverListener.insertError()", e})); 
          throw e;
        }

      }
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + this.dataSet.getTableName() + 
                    ", ResolverListener.insertError(dataSet: " + dataSet.getTableName() + ", row: " + row + 
                    ", exception: " + ex + ", response." + 
                    (response.isAbort() ? "isAbort" : (response.isIgnore() ? 
                                                       "isIgnore" : "isRetry")) + "())"); 
      }
    }

    public void deleteError(DataSet dataSet, ReadWriteRow row, DataSetException ex, ErrorResponse response) throws DataSetException
    {
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).deleteError(dataSet, row, ex, response);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " + dataSet.getTableName() +  ", ResolverListener.deleteError()", e})); 
          throw e;
        }

      }
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + this.dataSet.getTableName() +  
                    ", ResolverListener.deleteError(dataSet: " + dataSet.getTableName() + ", row: " + row + 
                    ", exception: " + ex + ", response." + 
                    (response.isAbort() ? "isAbort" : (response.isIgnore() ? 
                                                       "isIgnore" : "isRetry")) + "())"); 
      }
    }

    public void updateError(DataSet dataSet, ReadWriteRow row, ReadRow oldRow, ReadWriteRow updRow, DataSetException ex, ErrorResponse response)  throws DataSetException {
      if (resolverListeners.get(dataSet) != null) {
        try {
          ((ResolverListener) resolverListeners.get(dataSet)).updateError(dataSet, row, oldRow, updRow, ex, response);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " + dataSet.getTableName() + ", ResolverListener.updatedError()", e})); 
          throw e;
        }
      }
      if (enableResolverListener) {
        out.println(getEventLabel() + " source: " + this.dataSet.getTableName() + 
                    ", ResolverListener.updateError(dataSet: " + dataSet + ", row: " + row + ", oldRow: " + oldRow + 
                    ", updateRow: " + updRow + ", exception: " + ex + ", response." + 
                    (response.isAbort() ? "isAbort" : (response.isIgnore() ? 
                                                       "isIgnore" : "isRetry")) + "())"); 
      }
    }
  }

  //
  // RowFilterListener implementation
  //
  class InnerRowFilterListener implements RowFilterListener {
    DataSet dataSet;

    public InnerRowFilterListener(DataSet source) {
      this.dataSet = source;
    }

    public void filterRow(ReadRow row, RowFilterResponse response) throws DataSetException {
      if (rowFilterListeners.get(dataSet) != null) {
        try {
          ((RowFilterListener) rowFilterListeners.get(dataSet)).filterRow(row, response);
        }
        catch (DataSetException e) {
          out.println(java.text.MessageFormat.format(Res._ExThrown, new Object[] {getEventLabel() +     
            " source: " +  dataSet.getTableName() + ", ResolverListener.filterRow()", e})); 
          throw e;
        }
      }
      else {
        response.add();
      }
      if (enableRowFilterListener) {
        out.println(getEventLabel() + " source: " + dataSet.getTableName() + 
                    ", RowFilterListener.filterRow(row: " + row + ", response." + 
                    (response.canAdd() ? "add" : "ignore") + "())"); 
      }
    }
  }

  //
  // StatusListener implementation
  //
  public void statusMessage(StatusEvent event) {
    if (!enableStatusListener) {
      return;
    }
    DataSet dataSet = (DataSet) event.getSource();
    out.println(getEventLabel() + " source: " +  dataSet.getTableName() +  " StatusListener.statusMessage: "); 
    switch (event.getCode()) {
      case StatusEvent.LOADING_DATA:
        out.println("StatusEvent.LOADING_DATA, message: " + event.getMessage()); 
        break;
      case StatusEvent.LOCATE_USE_ENTER:
        out.println("StatusEvent.LOCATE_USE_ENTER, message: " + event.getMessage()); 
        break;
      case StatusEvent.LOCATE_MATCH_FOUND:
        out.println("StatusEvent.LOCATE_MATCH_FOUND, message: " + event.getMessage()); 
        break;
      case StatusEvent.LOCATE_MATCH_NOT_FOUND:
        out.println("StatusEvent.LOCATE_MATCH_NOT_FOUND, message: " + event.getMessage()); 
        break;
      case StatusEvent.LOCATE_USE_MIXED_CASE:
        out.println("StatusEvent.LOCATE_USE_MIXED_CASE, message: " + event.getMessage()); 
        break;
      case StatusEvent.LOCATE_STRING:
        out.println("StatusEvent.LOCATE_STRING, message: " + event.getMessage()); 
        break;
      case StatusEvent.LOCATE_NON_STRING:
        out.println("StatusEvent.LOCATE_NON_STRING, message: " + event.getMessage()); 
          break;
      case StatusEvent.DATA_CHANGE:
        out.println("StatusEvent.DATA_CHANGE"); 
        break;
      case StatusEvent.EXCEPTION:
        out.println("StatusEvent.EXCEPTION"); 
        break;
      case StatusEvent.CLEAR:
        out.println("StatusEvent.CLEAR"); 
        break;
      case StatusEvent.EDIT_STARTED:
//      case StatusEvent.SORTING:
        out.println(java.text.MessageFormat.format(Res._OrMessage,     
	new Object[] {"StatusEvent.EDIT_STARTED", "StatusEvent.SORTING"})); 
        break;
      case StatusEvent.EDIT_CANCELED:
//      case StatusEvent.RESTRUCTURING:
        out.println(java.text.MessageFormat.format(Res._OrMessage,     
	new Object[] {"StatusEvent.EDIT_CANCELED", "StatusEvent.RESTRUCTURING"})); 
        break;
      case StatusEvent.CHECKING_DATASTORE:
        out.println("StatusEvent.CHECKING_DATASTORE"); 
        break;
      default:
        out.println(Res._StatusUnknown);     
        break;
    }
  }


 /**
  * <p>Returns whether the event monitor is enabled. If
  * <code>enabled</code> is <code>true</code>, the event monitor monitors
  * most events by default. The exceptions are <code>ColumnPaint</code>
  * and <code>RowFilter,</code> which produce considerable output that
  * you aren't likely to find useful. In addition, <code>CalcAggFields</code>
  * and <code>CalcFields</code> aren't monitored by default unless
  * there is a <code>CalcAggFields</code> or <code>CalcFields</code> listener
  * attached to the <code>DataSet. </code></p>
  *
  * <p>When <code>enabled</code> is set to <code>false</code>, all event monitoring
  * ceases. </p>
  *
  * <p>To prevent the monitoring of specific events, set the
  * property that enables monitoring to <code>false</code>. For
  * example, to prevent the monitoring of
  * <code>DataChangeEvents,</code> use  <code>setEnableDataChangeListener</code> to set <code>enableDataChangeListener</code> to
  * <code>false</code>. </p>
  *
  * @param enabled Set to <code>true</code> to monitor most events by default. Set to  <code>false</code>, in order to prevent event monitoring.
  *@see #isEnabled()
  */

  public void setEnabled(boolean enabled) {
    this.enabled = enabled;
  }

 /**
  * <p>Returns whether the event monitor is enabled. </p>
  *
  *@return If <code>true</code>, the event monitor monitors most events. If <code>false</code>, events are not monitored.
  *@see #setEnabled(boolean enabled)
  */
  public boolean isEnabled() {
    return enabled;
  }


/**
  * <p>Determines whether <code>DBEventMonitor</code> listens for <code>AccessEvents;</code> if <code>enableAccessListener</code> is set to <code>true</code>, it listens for the events. </p>
  *
  * @param enableAccessListener If <code>true</code>, listens for events.
  & @see #isEnableAccessListener()
  */
  public void setEnableAccessListener(boolean enableAccessListener) {
    this.enableAccessListener = enableAccessListener;
  }

/**
  * <p>Returns whether <code>DBEventMonitor</code> listens for <code>AccessEvents</code>.</p>
  *
  * @return If <code>true</code>, listens for the events.
  */
  public boolean isEnableAccessListener() {
    return enableAccessListener;
  }


 /**
  * <p>Determines whether <code>DBEventMonitor</code> is a listener for notification that rows in the <code>DataSet</code> having a
calculation on an aggregate column have been added, deleted, or modified. If
<code>enableCalcAggFieldsListener</code> is set to <code>true</code>, <code>DBEventMonitor</code> listens for notifications. </p>
  *
  * @param enableCalcAggFieldsListener If <code>true</code>, listens for events.
  * @see #isEnableCalcAggFieldsListener()
  */
  public void setEnableCalcAggFieldsListener(boolean enableCalcAggFieldsListener) {
    this.enableCalcAggFieldsListener = enableCalcAggFieldsListener;
  }

 /**
  * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification that rows in the <code>DataSet</code> having a calculation on an aggregate column have been added, deleted, or modified. </p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> is listening for events.
  * @see #setEnableCalcAggFieldsListener
  */

  public boolean isEnableCalcAggFieldsListener() {
    return enableCalcAggFieldsListener;
  }


  /**
   * <p>Determines whether <code>DBEventMonitor</code> is a listener for notification that rows in the <code>DataSet</code> having a calculation on a column have been added, deleted, or modified. If <code>enableCalcFieldsListener</code> is set to
<code>true</code>, <code>DBEventMonitor</code> listens for notifications. </p>
  *
  * @param enableCalcFieldsListener If <code>true</code>, <code>DBEventMonitor</code> listens for notifications.
  * @see #isEnableCalcFieldsListener
  */

  public void setEnableCalcFieldsListener(boolean enableCalcFieldsListener) {
    this.enableCalcFieldsListener = enableCalcFieldsListener;
  }

  /**
   * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification that rows in the <code>DataSet</code> having a calculation on a column have been added, deleted, or modified. </p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> listens for notifications.
  * @see #setEnableCalcFieldsListener
  */
  public boolean isEnableCalcFieldsListener() {
    return enableCalcFieldsListener;
  }

 /**
  * <p>Determines whether <code>DBEventMonitor</code> is a listener for notification that data in a column has changed. If <code>enableColumnChangeListener</code> is set to <code>true</code>, <code>DBEventMonitor</code> listens for notifications. </p>
  *
  * @param enableColumnChangeListener If <code>true</code>, <code>DBEventMonitor</code> listens for notifications.
  * @see #isEnableColumnChangeListener
  */
  public void setEnableColumnChangeListener(boolean enableColumnChangeListener) {
    this.enableColumnChangeListener = enableColumnChangeListener;
  }

 /**
  * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification that data in a column has changed. </p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> is listening for notifications.
  * @see #setEnableColumnChangeListener
  */
  public boolean isEnableColumnChangeListener() {
    return enableColumnChangeListener;
  }

 /**
  * <p>Determines whether <code>DBEventMonitor</code> is a listener for notification of the painting of a value in a column. If <code>enableColumnPaintListener </code> is set to <code>true</code>, it listens for notifications. </p>
  *
  * @param enableColumnPaintListener If <code>true</code>, <code>DBEventMonitor</code> listens for notifications.
  * @see #isEnableColumnPaintListener
  */

  public void setEnableColumnPaintListener(boolean enableColumnPaintListener) {
    this.enableColumnPaintListener = enableColumnPaintListener;
  }

 /**
  * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification of the painting of a value in a column.</p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> listens for notifications.
  * @see #setEnableColumnPaintListener
  */

  public boolean isEnableColumnPaintListener() {
    return enableColumnPaintListener;
  }

/**
 * <p>Determines whether <code>DBEventMonitor</code> listens for <code>DataChangeEvents</code>. If <code>enableDataChangeListener</code> is set to <code>true</code>, it listens for the events. </p>
  *
  * @param enableDataChangeListener If <code>true</code>, <code>DBEventMonitor</code> listens for notifications.
  * @see #isEnableDataChangeListener
  */

  public void setEnableDataChangeListener(boolean enableDataChangeListener) {
    this.enableDataChangeListener = enableDataChangeListener;
  }

/**
 * <p>Returns whether <code>DBEventMonitor</code> listens for <code>DataChangeEvents</code>.</p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> is listening  for notifications.
  * @see #setEnableDataChangeListener
  */
  public boolean isEnableDataChangeListener() {
    return enableDataChangeListener;
  }


 /**
  * <p>Determines whether <code>DBEventMonitor</code> is a listener for notification of row editing in the <code>DataSet</code>. If <code>enableEditListener</code> is set to <code>true</code>, it listens for notifications. </p>
  *
  * @param enableEditListener If <code>true</code>, <code>DBEventMonitor</code> listens for notifications.
  * @see #isEnableEditListener
  */

 public void setEnableEditListener(boolean enableEditListener) {
    this.enableEditListener = enableEditListener;
  }

 /**
  * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification of row editing in the <code>DataSet</code>.</p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> is listening for notifications.
  * @see #setEnableEditListener
  */
  public boolean isEnableEditListener() {
    return enableEditListener;
  }


 /**
  * <p>Determines whether <code>DBEventMonitor</code> is a listener for notification that a load operation on a <code>StorageDataSet</code> has been completed. If <code>enableLoadListener</code> is set to <code>true</code>, it listens for notifications. </p>
  *
  * @param enableLoadListener If true, <code>DBEventMonitor</code> listens for notifications.
  * @see #isEnableLoadListener
  */

  public void setEnableLoadListener(boolean enableLoadListener) {
    this.enableLoadListener = enableLoadListener;
  }

 /**
  * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification that a load operation on a <code>StorageDataSet</code> has been completed. </p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> listens for notifications.
  * @see #setEnableLoadListener
  */
  public boolean isEnableLoadListener() {
    return enableLoadListener;
  }



 /**
  * <p>Determines whether <code>DBEventMonitor</code> listens for <code>NavigationEvents</code>. If
<code>enableNavigationListener</code> is set to <code>true</code>, it listens for the events.</p>
  *
  * @param enableNavigationListener If <code>true</code>, <code>DBEventMonitor</code> listens for <code>NavigationEvents. </code>
  * @see #isEnableNavigationListener
  */
  public void setEnableNavigationListener(boolean enableNavigationListener) {
    this.enableNavigationListener = enableNavigationListener;
  }

 /**
  * <p>Returns whether <code>DBEventMonitor</code> listens for <code>NavigationEvents</code>.</p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> is listening for <code>NavigationEvents. </code>
  * @see #isEnableNavigationListener
  */
  public boolean isEnableNavigationListener() {
    return enableNavigationListener;
  }

 /**
  *<p>Determines whether <code>DBEventMonitor</code> is a listener for notification that a <code>DataSet</code> has opened or closed; if <code>enableOpenListener</code> is <code>true</code>, it listens for notifications.  </p>
  *
  * @param enableOpenListener If <code>true</code>, <code>DBEventMonitor</code> listens for notification.
  * @see #isEnableOpenListener
  */

 public void setEnableOpenListener(boolean enableOpenListener) {
    this.enableOpenListener = enableOpenListener;
  }


 /**
  * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification that a <code>DataSet</code> has opened or closed.</p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> listens for notification.
  * @see #setEnableOpenListener
  */
  public boolean isEnableOpenListener() {
    return enableOpenListener;
  }

 /**
  * <p>Determines whether <code>DBEventMonitor</code> is a listener for notification before and after a <code>StorageDataSet</code> is resolved; if <code>enableResolverListener</code> is <code>true</code>, it listens for notifications. </p>
 *
  * @param enableResolverListener If <code>true</code>, <code>DBEventMonitor</code> listens for notification before and after a <code>StorageDataSet</code> is resolved.
  * @see #isEnableOpenListener
  */

  public void setEnableResolverListener(boolean enableResolverListener) {
    this.enableResolverListener = enableResolverListener;
  }


 /**
  * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification before and after a <code>StorageDataSet</code> is resolved.</p>
  *
  * @return enableResolverListener If <code>true</code>, <code>DBEventMonitor</code> listens for notification.
  * @see #isEnableResolverListener
  */
  public boolean isEnableResolverListener() {
    return enableResolverListener;
  }


 /**
  * <p>Determines whether <code>DBEventMonitor</code> is a listener for notification that a row is being added or updated; if <code>enableRowFilterListener</code> is <code>true</code>, it listens for notifications. </p>
 *
 * @param enableRowFilterListener If <code>true</code>, <code>DBEventMonitor</code> listens for notification that a row is being updated.
 * @see #setEnableRowFilterListener
 */

  public void setEnableRowFilterListener(boolean enableRowFilterListener) {
    this.enableRowFilterListener = enableRowFilterListener;
  }


 /**
  * <p>Returns whether <code>DBEventMonitor</code> is a listener for notification that a row is being added or updated.</p>
  *
  * @return enableRowFilterListener If <code>true</code>, <code>DBEventMonitor</code> listens for notification.
  * @see #setEnableRowFilterListener
  */

  public boolean isEnableRowFilterListener() {
    return enableRowFilterListener;
  }


 /**
  * <p>Determines whether <code>DBEventMonitor</code> listens for <code>StatusEvents;</code> if <code>enableStatusListener</code> is
<code>true</code>, it listens for the events.</p>
  *
  * @param enableStatusListener If <code>true</code>, <code>DBEventMonitor</code> listens for events.
  * @see #isEnableStatusListener
  */

  public void setEnableStatusListener(boolean enableStatusListener) {
    this.enableStatusListener = enableStatusListener;
  }

 /**
  * <p>Returns whether <code>DBEventMonitor</code> listens for <code>StatusEvents;</code> if <code>enableStatusListener</code> is
<code>true</code>, it listens for the events.</p>
  *
  * @return If <code>true</code>, <code>DBEventMonitor</code> listens for events.
  * @see #setEnableStatusListener
  */

  public boolean isEnableStatusListener() {
    return enableStatusListener;
  }

  private String getEventLabel() {
    return "DBEventMonitor[" + new java.util.Date() + "]"; 
  }

  /** HashMap of replaced CalcAggFieldsListeners */
  private HashMap calcAggFieldsListeners = new HashMap(10);

  /** HashMap of CalcAggFieldsListener inner classes */
  private HashMap innerCalcAggFieldsListeners = new HashMap(10);

  /** HashMap of replaced CalcFieldsListeners */
  private HashMap calcFieldsListeners = new HashMap(10);

  /** HashMap of CalcFieldsListener inner classes*/
  private HashMap innerCalcFieldsListeners = new HashMap(10);

  /** HashMap of replaced ResolverListeners */
  private HashMap resolverListeners = new HashMap(10);

  /** HashMap of ResolverListener inner classes */
  private HashMap innerResolverListeners = new HashMap(10);

  /** HashMap of replaced RowFilterListeners */
  private HashMap rowFilterListeners = new HashMap(10);

  /** HashMap of RowFilterListener inner classes */
  private HashMap innerRowFilterListeners = new HashMap(10);

  /** HashMap indicating successful registration as OpenListener */
  private HashMap openListeners = new HashMap(10);

  /** HashMap of replaced ColumnChangeListeners */
  private HashMap columnChangeListeners = new HashMap(30);

  /** HashMap of replaced ColumnPaintListeners */
  private HashMap columnPaintListeners = new HashMap(30);

  /** whether or not AccessListener debug info is enabled */
  private boolean enableAccessListener = true;

  /** whether or not CalcAggFieldsListener debug info is enabled */
  private boolean enableCalcAggFieldsListener = false;

  /** whether or not CalcFieldsListener debug info is enabled */
  private boolean enableCalcFieldsListener = false;

  /** whether or not ColumnChangeListener debug info is enabled */
  private boolean enableColumnChangeListener = true;

  /** whether or not ColumnPaintListener debug info is enabled */
  private boolean enableColumnPaintListener = false;

  /** whether or not DataChangeListener debug info is enabled */
  private boolean enableDataChangeListener = true;

  /** whether or not EditListener debug info is enabled */
  private boolean enableEditListener = true;

  /** whether or not LoadListener debug info is enabled */
  private boolean enableLoadListener = true;


  /** whether or not NavigationListener debug info is enabled */
  private boolean enableNavigationListener = true;

  /** whether or not OpenListener debug info is enabled */
  private boolean enableOpenListener = true;

  /** whether or not ResolverListener debug info is enabled */
  private boolean enableResolverListener = true;

  /** whether or not RowFilterListener debug info is enabled */
  private boolean enableRowFilterListener = false;

  /** whether or not StatusListener debug info is enabled */
  private boolean enableStatusListener = true;

  /** whether or not any output is enabled */
  private boolean enabled = true;

  /** array of DataSets to which this component has registered for DataSet events */
  private DataSet [] dataSets;

  /** user-specified array of DataSets with which to
      register for DataSet events */
  private DataSet [] userSetDataSets;

  /** DataSet Container */
  private Container container;

  /** whether or not we've already registered with data-aware component container */
  private boolean registeredContainer = false;

  /** user-specified array of data-aware components with which to
      register for DataSet events */
  private DataSetAware [] userSetDataAwareComponents;

  /** array of current components to which this component has registered for
      DataSet events */
  private DataSetAware [] dataAwareComponents;

  /** PrintStream used for output */
  private transient PrintStream out = System.out;
}
