/**
 * Copyright (c) 1996-2004 Borland Software Corp. All Rights Reserved.
 *
 * This SOURCE CODE FILE, which has been provided by Borland as part
 * of a Borland product for use ONLY by licensed users of the product,
 * includes CONFIDENTIAL and PROPRIETARY information of Borland.
 *
 * USE OF THIS SOFTWARE IS GOVERNED BY THE TERMS AND CONDITIONS
 * OF THE LICENSE STATEMENT AND LIMITED WARRANTY FURNISHED WITH
 * THE PRODUCT.
 *
 * IN PARTICULAR, YOU WILL INDEMNIFY AND HOLD BORLAND, ITS RELATED
 * COMPANIES AND ITS SUPPLIERS, HARMLESS FROM AND AGAINST ANY
 * CLAIMS OR LIABILITIES ARISING OUT OF THE USE, REPRODUCTION, OR
 * DISTRIBUTION OF YOUR PROGRAMS, INCLUDING ANY CLAIMS OR LIABILITIES
 * ARISING OUT OF OR RESULTING FROM THE USE, MODIFICATION, OR
 * DISTRIBUTION OF PROGRAMS OR FILES CREATED FROM, BASED ON, AND/OR
 * DERIVED FROM THIS SOURCE CODE FILE.
 */
//--------------------------------------------------------------------------------------------------
// Copyright (c) 1996 - 2004 Borland Software Corporation. All Rights Reserved.
//--------------------------------------------------------------------------------------------------
package com.borland.dbswing;

import com.borland.jb.util.*;

import java.util.*;

/**
 * <p>Informs all <code>StatusLabelListeners</code> that a
 * <code>JdbStatusLabel</code> is about to display a message.  A
 * listener may suppress or replace the message. To replace it, the
 * listener sets the <code>JdbStatusLabel</code>'s <code>text</code>
 * property, then throws a <code>com.borland.jb.util.VetoException</code>, which instructs
 * <code>JdbStatusLabel</code> to do nothing further with the
 * <code>StatusEvent</code>.  To suppress the message, the listener
 * just throws a <code>VetoException</code>. If no listener vetoes a
 * <code>StatusEvent</code>, <code>JdbStatusLabel</code> displays the
 * message as usual.  A listener is not restricted to setting the
 * <code>JdbStatusLabel</code>'s <code>text</code> property; it can
 * also display an icon or set other visible properties.</p>
 *
 * <p>The read-only <code>code</code> property tells the source of the
 * message and the reason for it.  A message can come from the
 * <code>JdbStatusLabel</code> itself, from a <code>StatusEvent</code>,
 * or from a <code>ValidationException</code>.  <code>ValidationException</code>s actually are wrapped as
 * <code>StatusEvent</code>s, but for convenience
 * <code>StatusLabelEvent</code> assigns them a separate code.  No
 * event is fired when the <code>JdbStatusLabel</code>'s
 * <code>displayMessages</code> property is <code>false</code> or when
 * a user message is displayed through <code>JdbStatusLabel</code>'s
 * <code>setText()</code> method.</p>
 */
public class StatusLabelEvent extends EventObject
  implements VetoableDispatch
{

  /**
   * <p>Indicates the <code>JdbStatusLabel</code> is about to display
   * its initial message. If the label's <code>text</code> property has
   * been set, the string in <code>messageObject</code> is its value.
   * If the <code>text</code> property has not been set, the string is
   * &quot;(empty dataset) Use &lt;Insert&gt; to insert new row.&quot;
   * if the <code>DataSet</code> is empty, or &quot;Record n of m&quot;
   * if the <code>DataSet</code> is not empty.</p>
   */
  public final static int INIT = 0;

  /**
   * <p>Indicates <code>JdbStatusLabel</code> is about to display a
   * message generated by a <code>StatusEvent</code>. The
   * <code>messageObject</code> is the actual <code>StatusEvent</code>
   * whose message is about to be displayed by <code>JdbStatusLabel</code>.</p>
   *
   */
  public final static int STATUS_EVENT = 1;

  /**
   * <p>Indicates <code>JdbStatusLabel</code> is about to display a
   * message generated by an <code>Exception</code>. The string
   * "EXCEPTION OBJECT WHOSE MESSAGE IS" that is about to be displayed
   * by the <code>JdbStatusLabel</code> is the <code>messageObject</code>.</p>
   */
  public final static int EXCEPTION = 2;

  /**
   * <p>Indicates <code>JdbStatusLabel</code> is about to display a
   * message because the <code>DataSet</code> opened.  The string about
   * to be displayed by the <code>JdbStatusLabel</code> is the
   * <code>messageObject</code>. The string is &quot;(empty dataset)
   * Use &lt;Insert&gt; to insert new row.&quot; if the
   * <code>DataSet</code> is empty, or &quot;Record n of m&quot; if the
   * <code>DataSet</code> not empty.</p>
   */
  public final static int DATASET_OPENED = 3;

  /**
   * <p>Indicates <code>JdbStatusLabel</code> is about to display a
   * message because the <code>DataSet</code> closed.  The string about
   * to be displayed by the <code>JdbStatusLabel</code> is the
   * <code>messageObject</code>. The string is &quot; &quot;.</p>
   */
  public final static int DATASET_CLOSED = 4;

  /**
   * <p>Indicates <code>JdbStatusLabel</code> is about to display a
   * message because the currently focused <code>DataSet</code>
   * changed. The string about to be displayed by the
   * <code>JdbStatusLabel</code> is the <code>messageObject</code>. If
   * the <code>text</code> property has not been set, the string is
   * &quot;(empty dataset) Use &lt;Insert&gt; to insert new row.&quot;
   * if the <code>DataSet</code> is empty, or &quot;Record n of m&quot;
   * if the <code>DataSet</code> is not empty.</p>
   */
  public final static int DATASET_CHANGED = 5;

  /**
   * <p>Indicates <code>JdbStatusLabel</code> is about to display a
   * message because the user navigated to a new row in the
   * <code>DataSet</code>. The string about to be displayed by the
   * <code>JdbStatusLabel</code> is the <code>messageObject</code>. The
   * string is &quot;(empty dataset) Use &lt;Insert&gt; to insert new
   * row.&quot; if the <code>DataSet</code> is empty, or &quot;Record n
   * of m&quot; if the <code>DataSet</code> not empty.</p>
   */
  public final static int DATASET_NAVIGATED = 6;

  /**
   * <p>Indicates <code>JdbStatusLabel</code> is about to display a
   * message because it received a
   * <code>DataChangeEvent.ROW_CHANGED</code> event. This event occurs  
   * whenever a column value has changed (but the row has not yet been
   * posted). The string about to be displayed by the
   * <code>JdbStatusLabel</code> is the <code>messageObject</code>.
   * <code>JdbStatusLabel</code> sets the string to &quot; &quot; to
   * clear any remaining validation exception messages.</p>
   */
  public final static int DATASET_ROW_CHANGED = 7;


  /**
   * <p>Constructs a <code>StatusLabelEvent</code> with the specified
   * source of the event, the <code>code</code> indicating what event
   * occurred, and the <code>messageObject</code> that displays on the
   * <code>JdbStatusLabel</code>.</p>
   *
   * @param source The source <code>Object</code> that generated the event.
   * @param code One of the <code>StatusEvent</code> variables that identifies the event that occurred.
   * @param messageObject The message that appears on the <code>JdbStatusLabel</code>.
   */

  public StatusLabelEvent(Object source, int code, Object messageObject) {
    super(source);
    this.code          = code;
    this.messageObject = messageObject;
  }

  public void vetoableDispatch(EventListener listener) throws VetoException {
    ((StatusLabelListener)listener).messageUpdate(this);
  }

  /**
   * <p>Returns the message for the event that displays on the <code>JdbStatusLabel</code>.</p>
   *
   * @return The message.
   */
  public final Object getMessageObject() { return messageObject; }


  /** 
   * <p>Returns the code that indicates the kind of event that occurred.</p> 
   *
   * @return The code that indicates the kind of event that occurred.
   */
  public final int getCode() { return code; }

  private Object  messageObject;
  private int     code;

}
